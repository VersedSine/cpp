// <Bigint> -*- Vss -*-

/** @file Vss/Bigint.h
 */

#ifndef VSS_BIGINT
#define VSS_BIGINT

#include <math.h>
#include <string>
#include <vector>
#include <cstring>
#include <ctype.h>
#include <iostream>
#include <stdexcept>
#include <type_traits>

#ifdef VSS_BIGINT_DEBUG__
#include <cassert>
#endif

namespace Vss{

class Bigint
{
public:
    Bigint();
    Bigint(const char *__str);
    Bigint(const std::string &__str);
    Bigint(const Bigint &_other);
    Bigint(const float &_num);
    Bigint(const double &_num);
    Bigint(const long double &_num);
    template<typename _T=long long>Bigint(const _T &_num);

    //                   operator"" _bint
           Bigint&       operator= (const Bigint &__A);
    friend Bigint        operator+ (const Bigint &__A);
    friend Bigint        operator- (const Bigint &__A);
    friend bool          operator< (const Bigint &__A,const Bigint &__B);
    friend bool          operator> (const Bigint &__A,const Bigint &__B);
    friend bool          operator<=(const Bigint &__A,const Bigint &__B);
    friend bool          operator>=(const Bigint &__A,const Bigint &__B);
    friend bool          operator==(const Bigint &__A,const Bigint &__B);
    friend bool          operator!=(const Bigint &__A,const Bigint &__B);
    friend Bigint        operator+ (const Bigint &__A,const Bigint &__B);
    const  Bigint&       operator+=(const Bigint &__A);
    const  Bigint&       operator++();
           Bigint        operator++(int);
    friend Bigint        operator- (const Bigint &__A,const Bigint &__B);
    const  Bigint&       operator-=(const Bigint &__A);
    const  Bigint&       operator--();
           Bigint        operator--(int);
    friend Bigint        operator* (const Bigint &__A,const Bigint &__B);/*
    friend Bigint        operator/ (const Bigint &__A,const Bigint &__B);
    friend Bigint        operator% (const Bigint &__A,const Bigint &__B);*/
    friend std::istream& operator>>(std::istream &__is,Bigint &__A);
    friend std::ostream& operator<<(std::ostream &__os,const Bigint &__A);

    void   e(long long __x);                     // (*this) *= 10^x
    Bigint e(const Bigint &__A,long long __x);    // (*this)*10^x

private:
    bool isNegative;
    std::vector<char>digits;
    void removeLeadingZeros();
};


Bigint::Bigint()
{
    isNegative = false;
}

Bigint::Bigint(const char *__str){
    long long _idx=std::strlen(__str)-1,_end=-1;
    if(__str[0]=='-')
    {
        isNegative = true;
        _end++;
    }
    else
    {
        isNegative = false;
    }

    while(_idx!=_end)
    {
#ifdef VSS_BIGINT_DEBUG__
        assert(std::isdigit(__str[_idx]));
#endif
        digits.push_back(__str[_idx]-'0');
        _idx--;
    }
}

Bigint::Bigint(const std::string &__str)
{
    auto __it=__str.rbegin(),_end=__str.rend();
    if(__str.front()=='-')
    {
        isNegative = true;
        _end--;
    }
    else
    {
        isNegative = false;
    }

    while(__it!=_end)
    {
#ifdef VSS_BIGINT_DEBUG__
        assert(std::isdigit(*__it));
#endif
        digits.push_back(*__it-'0');
        __it++;
    }
}

Bigint::Bigint(const Bigint &_other)
{
    isNegative = _other.isNegative;
    digits = _other.digits;
}

Bigint::Bigint(const float &_num) : Bigint((long double)_num) { }

Bigint::Bigint(const double &_num) : Bigint((long double)_num) { }

Bigint::Bigint(const long double &_num)
{
    long double _value = _num;
    if(_value==0)
    {
        digits.push_back(0);
        return ;
    }
    else if(_value<0)
    {
        isNegative = true;
        _value = -_value;
    }
    else
    {
        isNegative = false;
    }

    while(_value)
    {
        digits.push_back(fmodl(_value,10));
        _value = (_value-fmodl(_value,10))/10;
    }
}


template<typename _T=long long>
Bigint::Bigint(const _T &_num)
{
    _T _value = _num;
    if(_value==0)
    {
        this->isNegative = false;
        this->digits.push_back(0);
        return ;
    }
    else if(_value<0)
    {
        this->isNegative = true;
        _value = -_value;
    }
    else
    {
        this->isNegative = false;
    }

    while(_value)
    {
        this->digits.push_back(_value%10);
        _value /= 10;
    }
}

Bigint operator"" _bint(unsigned long long _num)
{
    return Bigint(_num);
}

Bigint operator"" _bint(long double _num)
{
    return Bigint(_num);
}

Bigint& Bigint::operator=(const Bigint &__A)
{
    isNegative = __A.isNegative;
    digits = __A.digits;
    return *this;
}

Bigint operator+(const Bigint &__A)
{
    return __A;
}

Bigint operator-(const Bigint &__A)
{
    if(__A==0)
    {
        return __A;
    }
    Bigint __res=__A;
    __res.isNegative ^= true;
    return __res;
}

bool operator<(const Bigint &__A,const Bigint &__B)
{
    if(__A.digits.size()==1&&__A.digits[0]==0&&__B.digits.size()==1&&__B.digits[0]==0)
    {
        return false;
    }
    if(__A.isNegative^__B.isNegative)
    {
        return __A.isNegative>__B.isNegative;
    }
    if(__A.digits.size()!=__B.digits.size())
    {
        return __A.digits.size()<__B.digits.size();
    }
    return std::lexicographical_compare(__A.digits.rbegin(),__A.digits.rend(),__B.digits.rbegin(),__B.digits.rend());
}

bool operator>(const Bigint &__A,const Bigint &__B)
{
    return __B<__A;
}

bool operator<=(const Bigint &__A,const Bigint &__B)
{
    return !(__A<__B);
}

bool operator>=(const Bigint &__A,const Bigint &__B)
{
    return !(__A>__B);
}

bool operator==(const Bigint &__A, const Bigint &__B)
{
    return !(__A<__B)&&!(__A>__B);
}

bool operator!=(const Bigint &__A,const Bigint &__B)
{
    return !(__A==__B);
}
operator bool()
{
    return (*this)!=0;
}

Bigint operator+(const Bigint &__A,const Bigint &__B)
{
    if(!__A.isNegative&&__B.isNegative)
    {
        return __A-(-__B);
    }
    else if(__A.isNegative&&!__B.isNegative)
    {
        return __B-(-__A);
    }

    Bigint __res;
    __res.isNegative = __A.isNegative;

    size_t __cnt=0;
    char __cur=0;
    while(__cnt<std::max(__A.digits.size(),__B.digits.size()))
    {
        char _sum=__cur;
        if(__cnt<__A.digits.size())
        {
            _sum += __A.digits[__cnt];
        }
        if(__cnt<__B.digits.size())
        {
            _sum += __B.digits[__cnt];
        }
        __res.digits.push_back(_sum%10);
        __cur = _sum/10;
        __cnt++;
    }
    if(__cur)
    {
        __res.digits.push_back(__cur);
    }
    return __res;
}

const Bigint& Bigint::operator+=(const Bigint &__A)
{
    return *this = *this+__A;
}

const Bigint& Bigint::operator++()
{
    return *this = *this+1;
}

Bigint Bigint::operator++(int)
{
    return *this = *this+1;
}

Bigint operator-(const Bigint &__A,const Bigint &__B)
{
    if(!__A.isNegative&&__B.isNegative)
    {
        return __A+(-__B);
    }
    else if(__A.isNegative&&!__B.isNegative)
    {
        return -(-__A+__B);
    }

    Bigint __res;
    if(__A<__B)
    {
        __res = __B-__A;
        __res.isNegative = true;
        return __res;
    }
    else
    {
        __res.isNegative = false;
    }

    size_t __cnt=0;
    char __cur=0;
    while(__cnt<__A.digits.size())
    {
        __cur += __A.digits[__cnt];
        if(__cnt<__B.digits.size())
        {
            __cur -= __B.digits[__cnt];
        }

        if(__cur<0)
        {
            __res.digits.push_back(__cur+10);
            __cur = -1;
        }
        else
        {
            __res.digits.push_back(__cur);
            __cur = 0;
        }
        __cnt++;
    }
    __res.removeLeadingZeros();
    return __res;
}

const Bigint& Bigint::operator-=(const Bigint &__A)
{
    return *this = *this-__A;
}

const Bigint& Bigint::operator--()
{
    return *this = *this-1;
}

Bigint Bigint::operator--(int)
{
    return *this = *this-1;
}

Bigint operator*(const Bigint &__A,const Bigint &__B)
{
    if(__A==0||__B==0)
    {
        return 0;
    }
    else if(__A==1||__B==1)
    {
        return __A==1?__B:__A;
    }
    else if(__A==-1||__B==-1)
    {
        return __A==-1?-__B:-__A;
    }
    Bigint __res;

    // TODO
    throw std::runtime_error("TODO");

    return __res;
}

std::istream& operator>>(std::istream &__is,Bigint &__A)
{
    std::string __in;
    __is >> __in;

    if(*__in.begin()=='-')
    {
        __A.isNegative = true;
    }
    else
    {
        __A.isNegative = false;
    }

    auto __it=__in.rbegin();
    __A.digits.clear();
    while(__it!=(__A.isNegative?--__in.rend():__in.rend()))
    {
        __A.digits.push_back(*__it-'0');
        __it++;
    }
    __A.removeLeadingZeros();

    return __is;
}

std::ostream& operator<<(std::ostream &__os,const Bigint &__A)
{
    __os << (__A.isNegative?"-":"");
    for(auto _element=__A.digits.rbegin();_element!=__A.digits.rend();_element++)
    {
        __os << (int)*_element;
    }
    return __os;
}

void Bigint::e(long long __x)
{
    if(__x>0)
    {
        this->digits.insert(this->digits.begin(),__x,0);
    }
    else if(__x<0)
    {
        this->digits.erase(this->digits.begin(),this->digits.begin()+std::min(std::size_t(-__x),this->digits.size()));
        if(this->digits.size()==0)
        {
            this->digits.push_back(0);
        }
    }
}

Bigint Bigint::e(const Bigint &__A,long long __x)
{
    Bigint __res=__A;
    if(__x>0)
    {
        __res.digits.insert(__res.digits.begin(),__x,0);
    }
    else if(__x<0)
    {
        __res.digits.erase(__res.digits.begin(),__res.digits.begin()+std::min(std::size_t(-__x),__res.digits.size()));
        if(__res.digits.size()==0)
        {
            __res.digits.push_back(0);
        }
    }
    return __res;
}

void Bigint::removeLeadingZeros()
{
    while(this->digits.size()>1&&this->digits.back()==0)
    {
        this->digits.pop_back();
    }
}

}

#endif